<Project>
  <Name>SWP</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>preprocessing</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>NeighbourhoodGraph</Name>
        <Access>Public</Access>
        <Location left="134" top="707" />
        <Size width="444" height="231" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private Map&lt;Point2D, Set&lt;Edge&gt;&gt; adjacencyLists</Member>
        <Member type="Field">private Map&lt;Point2D, Set&lt;Edge&gt;&gt; distanceMap</Member>
        <Member type="Field">private double alpha</Member>
        <Member type="Method">public void setVertices(Set&lt;Point2D&gt; points)</Member>
        <Member type="Method">public double distance(Point2D a, Point2D b)</Member>
        <Member type="Method">public void calculateAllDistances()</Member>
        <Member type="Method">public List&lt;Edge&lt;Point2D&gt;&gt; getNeighbours(Point2D vertex)</Member>
        <Member type="Method">private Set&lt;Coordinate&gt; toCoordinateSet(Set&lt;Point2D&gt; points)</Member>
        <Member type="Method">private void addAdjacency(Point2D point, Point2D adjacentPoint, double edgeLength)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>MetricGraph&lt;Point2D&gt;</Name>
        <Access>Public</Access>
        <Location left="217" top="409" />
        <Size width="245" height="94" />
        <Collapsed>False</Collapsed>
        <Member type="Method">List&lt;Edge&lt;V&gt;&gt; getNeighbours(V node)</Member>
      </Entity>
      <Entity type="Class">
        <Name>HashSet</Name>
        <Access>Public</Access>
        <Location left="553" top="490" />
        <Size width="181" height="161" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void add(E e)</Member>
        <Member type="Method">public boolean isEmpty()</Member>
        <Member type="Method">public Iterator&lt;E&gt; iterator()</Member>
        <Member type="Method">public int size()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GPSMetricSpace</Name>
        <Access>Public</Access>
        <Location left="134" top="1023" />
        <Size width="246" height="107" />
        <Collapsed>False</Collapsed>
        <Member type="Method">private Set&lt;Point2D&gt; parse(String filename)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>EpsilonNet</Name>
        <Access>Public</Access>
        <Location left="826" top="760" />
        <Size width="297" height="172" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private double gridSize</Member>
        <Member type="Field">private static Comparator&lt;Point2D&gt; paintComparator</Member>
        <Member type="Constructor">private EpsilonNet(Set&lt;Point2D&gt; points, double epsilon)</Member>
        <Member type="Method">private Point getCellKey(Point2D point)</Member>
        <Member type="Method">private Set&lt;Point&gt; getNeighbourhoodKeys(Point2D point)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>EuclideanMetricSpace</Name>
        <Access>Public</Access>
        <Location left="914" top="502" />
        <Size width="251" height="94" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public double distance(Point2D a, Point2D b)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>MetricSpace&lt;P&gt;</Name>
        <Access>Public</Access>
        <Location left="508" top="220" />
        <Size width="246" height="105" />
        <Collapsed>False</Collapsed>
        <Member type="Method">double distance(P a, P b)</Member>
      </Entity>
      <Entity type="Class">
        <Name>ImageMetricSpace</Name>
        <Access>Public</Access>
        <Location left="482" top="1023" />
        <Size width="351" height="107" />
        <Collapsed>False</Collapsed>
        <Member type="Method">private Set&lt;Point2D&gt; extractPixels(BufferedImage image, Color color)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>Set&lt;P&gt;</Name>
        <Access>Public</Access>
        <Location left="540" top="10" />
        <Size width="179" height="159" />
        <Collapsed>False</Collapsed>
        <Member type="Method">void add(P p)</Member>
        <Member type="Method">boolean isEmpty()</Member>
        <Member type="Method">Iterator&lt;P&gt; iterator()</Member>
        <Member type="Method">int size()</Member>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Generalization" first="0" second="2">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="0" second="1">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="4" second="2">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="3" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="5" second="2">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="5" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="7" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="1" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="6" second="8">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>main</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Interface">
        <Name>MetricGraph&lt;V&gt;</Name>
        <Access>Public</Access>
        <Location left="383" top="310" />
        <Size width="245" height="94" />
        <Collapsed>False</Collapsed>
        <Member type="Method">List&lt;Edge&lt;V&gt;&gt; getNeighbours(V vertex)</Member>
      </Entity>
      <Entity type="Interface">
        <Name>MetricSpace&lt;P&gt;</Name>
        <Access>Public</Access>
        <Location left="560" top="81" />
        <Size width="246" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Method">double distance(P a, P b)</Member>
      </Entity>
      <Entity type="Class">
        <Name>Reconstruction</Name>
        <Access>Public</Access>
        <Location left="25" top="62" />
        <Size width="451" height="196" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private double radius</Member>
        <Member type="Field">private MetricSpaceImplemented&lt;P&gt; workspace</Member>
        <Member type="Method">public MetricGraph&lt;Set&lt;P&gt;&gt; reconstructMetricGraph()</Member>
        <Member type="Method">private MetricGraph&lt;Set&lt;P&gt;&gt; matchEdges(Set&lt;Set&lt;P&gt;&gt; vertices, Set&lt;Set&lt;P&gt;&gt; edges)</Member>
        <Member type="Method">private double getDiameter(Set&lt;P&gt; points)</Member>
        <Member type="Method">public MetricSpaceImplemented&lt;P&gt; getWorkspace()</Member>
        <Member type="Method">public static MetricSpaceImplemented&lt;P&gt; labelPoints(MetricSpace&lt;P&gt; space, double radius)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Edge&lt;V&gt;</Name>
        <Access>Public</Access>
        <Location left="38" top="310" />
        <Size width="162" height="122" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public double distance</Member>
        <Member type="Field">public V neighbour</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>MetricSpaceImplemented&lt;P&gt;</Name>
        <Access>Public</Access>
        <Location left="679" top="298" />
        <Size width="550" height="230" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private Set&lt;P&gt; edgePoints</Member>
        <Member type="Field">private Set&lt;P&gt; prelBranchPoints</Member>
        <Member type="Field">private Set&lt;P&gt; branchPoints</Member>
        <Member type="Field">MetricSpace&lt;P&gt; inputSpace</Member>
        <Member type="Method">public MetricSpaceImplemented&lt;P&gt; getPointsInRadius(P centre, double outerRadius, double innerRadius)</Member>
        <Member type="Method">public void labelAs(P point, int label)</Member>
        <Member type="Method">public void labelInRadius(P centre, double radius)</Member>
        <Member type="Method">public MetricSpaceImplemented&lt;P&gt; getLabelledAs(int label)</Member>
        <Member type="Method">public double distance(P a, P b)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>ReconstructedGraph&lt;P&gt;</Name>
        <Access>Public</Access>
        <Location left="279" top="495" />
        <Size width="304" height="179" />
        <Collapsed>False</Collapsed>
        <Member type="Field">protected Map&lt;Set&lt;P&gt;, Set&lt;Egde&gt;&gt; adjacencyLists</Member>
        <Member type="Field">protected Map&lt;Set&lt;P&gt;, Map &lt;Set, Double&gt;&gt; newField</Member>
        <Member type="Method">public void setVertices(Set&lt;Set&lt;P&gt;&gt; points)</Member>
        <Member type="Method">public void addEdge(Set&lt;P&gt; sourceVertex, Set&lt;P&gt; targetVertex, Set&lt;P&gt; edgePoints, double distance)</Member>
        <Member type="Method">public double distance(Set&lt;P&gt; a, Set&lt;P&gt; b)</Member>
        <Member type="Method">public Set&lt;Edge&lt;Set&gt;&gt; getNeighbours(Set&lt;P&gt; vertex)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>ReconstructionEdge</Name>
        <Access>Public</Access>
        <Location left="38" top="550" />
        <Size width="165" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Set&lt;P&gt; points</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>RipsVietoris&lt;V&gt;</Name>
        <Access>Public</Access>
        <Location left="710" top="564" />
        <Size width="232" height="186" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private MetricSpace&lt;V&gt; space</Member>
        <Member type="Field">private double radius</Member>
        <Member type="Field">private Set&lt;Set&lt;V&gt;&gt; components</Member>
        <Member type="Method">private Set&lt;Set&lt;V&gt;&gt; calculateComponents()</Member>
        <Member type="Method">public Set&lt;Set&lt;V&gt;&gt; getComponents()</Member>
        <Member type="Method">public int getDegree()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Generalization" first="0" second="1">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="0" second="3">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
      </Relationship>
      <Relationship type="Realization" first="4" second="1">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="5" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="6" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="5" second="6">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
      </Relationship>
    </Relationships>
  </ProjectItem>
</Project>